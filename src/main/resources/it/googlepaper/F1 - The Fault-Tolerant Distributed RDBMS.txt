Can you have a scalable database without going NoSQL?  Yes.
Can't afford to process inconsistent data ○ Eventual consistency too complex and painful.
Extensions for hierarchy and rich data types ○ Non-blocking schema changes.
Geography ● Replicas spread across the country to survive regional disasters.
Don't need foreign keys or joins if data is inlined.
Preferred transaction structure ● One read phase: No serial reads.
For bulk operations ● Use small transactions in parallel - high throughput.
Our Client Library ● Very lightweight ORM - doesn't really have the "R"
Never uses Relational joins or traversal ● All objects are loaded explicitly.
Hierarchical schema and protocol buffers make this easy ○ Don't join - just load child objects with a range read.
But predictable performance, scales well by default ● Developers happy.
We've moved a large and critical application suite from MySQL to F1
In short, we made our database scale, and didn't lose any key database features along the way.
